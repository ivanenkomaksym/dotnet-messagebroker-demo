@page "/Product/{productId}"
@model ProductDetailModel
@{
    ViewData["Title"] = "ProductDetail";
}

@{
    bool isAvailableOnStock = Model.Product.AvailableOnStock > 0;
    string buttonCssClass = isAvailableOnStock ? "btn-success" : "btn-secondary";
    string imageCssClass = isAvailableOnStock ? "" : "image-disabled";
    string stockLabel = isAvailableOnStock ? "In Stock" : "Out of Stock";
    string stockLabelCssClass = isAvailableOnStock ? "stock-label-in" : "stock-label-out";
}

<div class="container">
    <div class="row">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a asp-page="Index">Home</a></li>
                    <li class="breadcrumb-item"><a asp-page="Product">Product</a></li>
                    <li class="breadcrumb-item active" aria-current="page">@Model.Product.Name</li>
                </ol>
            </nav>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <!-- Image -->
        <div class="col-12 col-lg-6">
            <div class="card bg-light mb-3">
                <div class="card-body">
                    <a href="" data-toggle="modal" data-target="#productModal">
                        <img asp-append-version="true" class="card-img-top @imageCssClass @(!isAvailableOnStock ? "black-and-white" : "")" src="@Model.Product.ImageFile" alt="">
                        <p class="text-center">@Model.Product.Name</p>
                    </a>
                </div>
            </div>
        </div>

        <!-- Add to cart -->
        <div class="col-12 col-lg-6 add_to_cart_block">
            <div class="card bg-light mb-3">
                <div class="card-body">
                    <div class="price-wrapper">
                        <div class="new-price">
                            @Model.Product.DiscountedPrice.ToString("C")
                        </div>
                        <div class="old-price">
                            @if (Model.Product.Discount > 0)
                            {
                                <del>@Model.Product.Price.ToString("C")</del>
                            }
                        </div>
                    </div>
                    <div class="sold-rating-wrapper">
                        <div class="sold-items">@Model.Product.Sold.ToString("N0") sold</div>
                        <div class="rating">@Model.Product.Rating.ToString("0.0")</div>
                    </div>
                    <div class="stock-label @stockLabelCssClass">@stockLabel</div>
                    <form asp-page-handler="AddToCart" method="post" name="addToCartForm" id="add_cart_form">
                        <div class="form-group">
                        </div>
                        <div class="form-group">
                            <label>Quantity :</label>
                            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control",min="1" ,max="100" } })
                        </div>
                        <button type="submit" class="btn btn-block @buttonCssClass" @(!isAvailableOnStock ? "disabled" : "")>Add to Cart</button>
                        <input type="hidden" asp-for="@Model.Product.Id" name="productId" />
                    </form>
                    <div class="product_rassurance">
                        <ul class="list-inline">
                            <li class="list-inline-item"><i class="fa fa-truck fa-2x"></i><br />Fast delivery</li>
                            <li class="list-inline-item"><i class="fa fa-credit-card fa-2x"></i><br />Secure payment</li>
                            <li class="list-inline-item"><i class="fa fa-phone fa-2x"></i><br />+33 1 22 54 65 60</li>
                        </ul>
                    </div>
                    <div class="reviews_product p-3 mb-2 ">
                        3 reviews
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        (4/5)
                        <a class="pull-right" href="#reviews">View all reviews</a>
                    </div>
                    <div class="datasheet p-3 mb-2 bg-info text-white">
                        <a href="" class="text-white"><i class="fa fa-file-text"></i> Download DataSheet</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Description -->
        <div class="col-12">
            <div class="card border-light mb-3">
                <div class="card-header bg-primary text-white text-uppercase"><i class="fa fa-align-justify"></i> Description</div>
                <div class="card-body">
                    <p class="card-text">
                        @Model.Product.Summary
                    </p>
                </div>
            </div>
        </div>

    </div>

    <div class="customer-reviews">
        @if (!@Model.Reviews.Any())
        {
            <h2 class="review-header">No Reviews yet</h2>
        }
        else
        {
            <h2 class="review-header">Customer Reviews (@Model.Reviews.Count())</h2>
            <div class="average-rating">
                <span class="average-rating-label">Average Rating:</span>
                <span class="average-rating-value">@Math.Round(@Model.AverageRating, 1)</span>
                <span class="average-rating-stars">
                    @for (int i = 0; i < 5; i++)
                    {
                        if (i < Math.Floor(@Model.AverageRating))
                        {
                            <i class="fa fa-star star-filled"></i>
                        }
                        else if (i == Math.Floor(@Model.AverageRating) && @Model.AverageRating != Math.Floor(@Model.AverageRating))
                        {
                            <i class="fa fa-star star-partial" style="--partial-width: @Math.Round(((@Model.AverageRating - Math.Floor(@Model.AverageRating)) * 100))%;"></i>
                        }
                    }
                </span>
            </div>
            <div class="review-grid">
                <div class="star-count">5 stars</div>
                <div class="star-bar">
                    <div class="filled-stars" style="width: @(Model.StarRatio(5) * 100)%;"></div>
                    <div class="empty-stars" style="width: @(100 - Model.StarRatio(5) * 100)%;"></div>
                </div>

                <div class="star-count">4 stars</div>
                <div class="star-bar">
                    <div class="filled-stars" style="width: @(Model.StarRatio(4) * 100)%;"></div>
                    <div class="empty-stars" style="width: @(100 - Model.StarRatio(4) * 100)%;"></div>
                </div>

                <div class="star-count">3 stars</div>
                <div class="star-bar">
                    <div class="filled-stars" style="width: @(Model.StarRatio(3) * 100)%;"></div>
                    <div class="empty-stars" style="width: @(100 - Model.StarRatio(3) * 100)%;"></div>
                </div>

                <div class="star-count">2 stars</div>
                <div class="star-bar">
                    <div class="filled-stars" style="width: @(Model.StarRatio(2) * 100)%;"></div>
                    <div class="empty-stars" style="width: @(100 - Model.StarRatio(2) * 100)%;"></div>
                </div>

                <div class="star-count">1 stars</div>
                <div class="star-bar">
                    <div class="filled-stars" style="width: @(Model.StarRatio(1) * 100)%;"></div>
                    <div class="empty-stars" style="width: @(100 - Model.StarRatio(1) * 100)%;"></div>
                </div>

                <!-- Repeat the above pattern for 4, 3, 2, and 1 stars -->
                <!-- Make sure to adjust the widths of filled and empty stars based on the number of ratings -->
            </div>

            <div class="review-list">
                <ul class="reviews">
                    @foreach (var review in Model.Reviews)
                    {
                        <li class="review">
                            <div class="review-header">
                                <span class="review-rating">
                                    @for (int i = 0; i < review.Rating; i++)
                                    {
                                        <i class="fa fa-star"></i>
                                    }
                                </span>
                                <span class="review-date">@review.CreationDateTime?.ToString("MMMM dd, yyyy")</span>
                            </div>
                            <div class="review-content">
                                <div class="review-customer-info">
                                    @if (!review.Anonymous.HasValue || review.Anonymous.Value)
                                    {
                                        <span class="customer-name">@Model.ObfuscateString(@review.CustomerInfo.FirstName)</span>
                                    }
                                    else
                                    {
                                        <span class="customer-name">@review.CustomerInfo.FirstName</span>
                                    }
                                </div>
                                <p class="review-description">@review.Description</p>
                                <div class="review-details">
                                    <!-- Display review details such as likes, helpfulness, etc. -->
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }
    </div>

</div>

<script>
    function increment() {
    @Model.Quantity++;
    }
</script>
